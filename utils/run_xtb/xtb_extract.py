#!/usr/bin/python3.7
#####################################################################################
#####  This script searches for xtb output files from single-point calculations #####
##### performed on structures generated by THEMIS. It extracts final energies   #####
##### and compute interaction energies for all configurations. If the output is #####
##### not found or calculation did not converge, it assigns a repulsive energy  #####
##### for this configuration. Interaction energies are written on energy.log    #####
##### in an ordered way since THEMIS **MUST** read them in the same loop order  #####
##### in order to build the partition function and search for the most stable   #####
##### structures. PLEASE CHECK YOUR RESULTS CAREFULLY!!!!!                      #####
#####                                                                           #####
#####   Usage:                                                                  #####
#####   i) Copy this script to the folder containing all QM output files;       #####
#####   ii) Fill the following fields according to initial Themis setup:        #####
#####       nt=                                                                 #####
#####       nc=                                                                 #####
#####       nr1=                                                                #####
#####       nr2=                                                                #####
#####   iii) Check if the file "internal_energies.dat" is in this directory     #####
#####   iv)  python3 xtb_extract.py                                             #####
#####                                                                           #####
#####################################################################################

import os  
import sys
import re

#####################################################################################
#####          THESE ARE FIXED FOR XTB CALCULATIONS. DO NOT TOUCH!!!!!!         #####
#####################################################################################
# string to be searched in QM output file
string="TOTAL ENERGY"   

# string to check SCC convergence in xTB
not_converged="Self consistent charge iterator did not converge"

# conversion factor: hartree to kJ/mol
Eh2kj_mol=2625.5

#####################################################################################
#####          INPUT DATA ACCORDING TO THE SYSTEM. CHECK CAREFULLY!!!!!         #####
#####################################################################################
# assign the correct number of moves according to THEMIS run.
# number of translations number of points from grid.xyz or (10 * trans_factor^2 + 2)
nt="a"

# number of conformations for molecules 2 (nconf_mol2)
nc=2 

# number of rotations around fixed point (10 * point_rot_factor^2 + 2)
nr1=4

# number of rotations around fixed axis (axis_rot_moves)
nr2=5

def check_ensemble( nt, nc, nr1, nr2 ):

    list_moves = [ nt, nc, nr1, nr2 ]
    
    for elem in list_moves:
        try:
            elem=int(elem)
        except (ValueError,TypeError,SyntaxError):
            print("well, it WASN'T defined after all!")
            sys.exit("Undefined " + elem + " string!")
        else:
            print("sure, it was defined.")

    #result = False

    #for elem in list_moves:
    #    # Check if string is empty or contain only spaces
    #    if elem == "":
    #        result = True
    #        print(list_moves[elem])
    #        break;

    #if result:
    #    print('Yes, list contains one or more empty strings')
    #    sys.exit("Undefined " + elem + " string!")
    #else:
    #    print('List does not contains any empty string')

    return check_ensemble

####################################################################################
#   THEMIS used the interaction energy Eint = Edimer - Einf:
#       Edimer will be read from each xtb .log file;
#       Einf must be calculated separately for each mol2 conformation;
#           Done with run_xtb.sh script and written to internal_energies.dat
####################################################################################

def read_input( filein ):

    Einf_Eh=[]
    Einf_kJ_mol=[]

    if os.path.exists( filein ):
        int_en_file = open( filein, "r" )
        readfile = int_en_file.readlines()
    
        for line in readfile:
            energy = float(line.strip("'"))
            Einf_Eh.append(energy)
            energy_kJ_mol = energy * float(Eh2kj_mol)
            Einf_kJ_mol.append(energy_kJ_mol)

    else:
        sys.exit("File " + filein + " not found!")

    return Einf_kJ_mol

#####################################################################################

def create_output( fileout ):
    global fout

    if os.path.exists( fileout ):
        os.remove( fileout )
    fout = open( fileout,"a")
    fout.write('%15s\t\t%04s\t%04s\t%02s\t%05s\t%12s\t%12s\n' % ("energy","r2","r1","c","t","calculated?", "converged?"))
    
    return create_output

#############################################################################################
# This function returns interaction energy values via several checks.
# if output file exists, 
#    search for the "FINAL ENERGY" string;
#    if string exists, 
#       calculate interaction energy and write it in this loop position;
#       if string exists but calculation did not converge,
#          assign repulsive energy and write it in this loop position;           
#    if string does not exist (calculation failed), 
#       assign repulsive energy and write it in this loop position;
# if output file does not exist (THEMIS skipped it due to repulsive contact),
#    assign repulsive energy to configuration and write it in this loop position.
#############################################################################################

def return_energy( xtb_output ):
    
    fmt='%15.6f\t\t%04d\t%04d\t%02d\t%05d\t%12s\t%12s\n'
    repulsion = float( 1000000 )

    if os.path.exists( xtb_output ): 
        f = open( xtb_output,"r" )
        file_found = False    
        scc_ended  = True
        for line in f:
            if re.search( string, line ):
                fields     = line.strip().split()
                energy     = float(fields[3])*float(Eh2kj_mol) - float(Einf_kJ_mol[c-1]) 
                file_found = True
                fout.write(fmt % (energy,r2,r1,c,t,"Y","Y"))
            if re.search( not_converged, line ):
                energy     = repulsion
                file_found = True
                scc_ended  = False
                fout.write(fmt % (energy,r2,r1,c,t,"Y","N"))
                break
        if not ( file_found ):
            energy = repulsion 
            fout.write(fmt % (energy,r2,r1,c,t,"Y","N"))
            f.close()
    else:
        energy = repulsion      
        fout.write(fmt % (energy,r2,r1,c,t,"N","N"))

    return return_energy

#############################################################################################
#####    perform loops over all t, c, r1 and r2 moves according to THEMIS INPUT file    #####
#############################################################################################
# i.   remember that python indexes starts from zero;
# ii.  files are numbered according to their position in THEMIS loops:
#      point_"translation"_"conformation"_"rotation1"_"rotation2".log
# iii. these numbers have different digits, thus: point_xxxxx_yy_zzzz_wwww.log
# iv.  energy.log file MUST contain nt x nc x nr1 x nr2 energy values, and the header: 
#      a total of (nt x nc x nr1 x nr2) + 1 lines.
#############################################################################################

Einf_kJ_mol = read_input( "internal_energies.dat" )

check_ensemble( nt, nc, nr1, nr2 )

create_output( "output.log" )

for t in range(1,int(nt)+1):
    for c in range(1,int(nc)+1):
        for r1 in range(1,int(nr1)+1):
            for r2 in range(1,int(nr2)+1):
                xtb_output = 'point_%05d_%02d_%04d_%04d.log' % (t, c, r1, r2) 
                return_energy( xtb_output )

fout.close()
