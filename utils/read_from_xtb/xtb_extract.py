###################################################################################################
#                                                                                                 #
#> @file   xtb_extract.py                                                                         #
#> @author Felippe M. Colombari                                                                   #
#> @brief  Searches for xtb output files and extract final energies to compute interaction energy #
#>         values for all configurations.                                                         #
#> @date - May, 2021                                                                              #
#> - first translation from bash to python3                                                       #
#> - documentation and revision                                                                   #
#> @date - Jan, 2024                                                                              #
#> - add support for multiple conformation of mol2 in interaction energy calculation              #
#> - final checks and update documentation                                                        #
#> @email  bug reports to: colombarifm@hotmail.com                                                #
#> @note   usage: python3 xtb_extract.py                                                          #
#> @note   final units: kJ/mol                                                                    #
#> @note   Please check the resulting file (energy.log) carefully!!!                              #
#                                                                                                 #
###################################################################################################
#####                                                                                         #####
#####   This script searches for xtb output files from single-point calculations performed on #####
##### structures generated by THEMIS. It extracts final energy values and compute interaction #####
##### energies for all configurations. If the output is not found or if calculation did not   #####
##### finish/converge for a given structure, a repulsive energy value is assigned.            #####
##### Interaction energies are written on energy.log in an ordered way since THEMIS **MUST**  #####
##### read them in the same loop order to build the partition function and also to search for ##### 
##### the most stable structures. PLEASE CHECK YOUR RESULTS CAREFULLY!!!!!                    #####
#####                                                                                         #####
#####   Usage:                                                                                #####
#####   i) Copy this script to the folder containing all QM output files;                     #####
#####   ii) Fill the following fields according to initial Themis setup:                      #####
#####       nt=< number of translation points >                                               #####
#####       nc=< number of mol2 conformations >                                               #####
#####       nr1=< number of rotation1 moves >                                                 #####
#####       nr2=< number of rotations moves >                                                 #####
#####   iii) An additional file containing internal energy value for each conformation must   #####
#####        be supplied (internal_energies.dat):                                             #####
#####                                                                                         #####
#####        #conformation int_ener                                                           #####
#####        1             XXXX                                                               ##### 
#####        2             YYYY                                                               #####
#####        ...           ...                                                                #####
#####                                                                                         #####
#####   iv)  python3 xtb_extract.py                                                           #####
#####                                                                                         #####
###################################################################################################

import os  
import sys
import re
import numpy as np

###################################################################################################
#####          INPUT DATA ACCORDING TO THE SYSTEM. CHECK CAREFULLY!!!!!                       #####
###################################################################################################
##### assign the correct number of moves according to THEMIS run used to write structures     #####
##### number of translation points:                                                           #####
nt=1                                                                                          #####
##### number of type 1 rotations (aroud point):                                               #####
nr1=1                                                                                         #####
##### number of type 2 rotations (around axis):                                               #####
nr2=3                                                                                         #####
##### number of conformations for mol2:                                                       #####
nc=5                                                                                          #####
###################################################################################################

###################################################################################################
##### Interaction energy: Eint(t, c, r1, r2) = Edimer(t, c, r1, r2) - Einf(c)                 #####
#####                                                                                         #####
##### Edimer will be read from each XTB output file;                                          #####
#####                                                                                         #####
##### conversion factor from hartree to kJ/mol:                                               #####
Eh2kj_mol=2625.5                                                                              #####
##### Einf must be calculated separately for each mol2 conformation and will be read from     #####
##### internal_energies.dat file                                                              #####
with open('internal_energies.dat','rt') as filedata:                                          #####
    Einf_Eh = np.genfromtxt('internal_energies.dat', unpack=True)                             #####
#####                                                                                         #####
Einf = [None] * nc                                                                            #####
#####                                                                                         #####
for energy in range(0,nc):                                                                    #####
    Einf[energy]= float(Einf_Eh[1,energy]) * float(Eh2kj_mol)                                 #####
    #print(Einf_Eh[1,energy])                                                                 #####
#for energy in range(0,nc):                                                                   #####
    #print(Einf[energy])                                                                      #####
#####                                                                                         #####
###################################################################################################

###################################################################################################
##### First check on xtb output file: energy string to be searched in QM output file          #####
energy_string="TOTAL ENERGY"                                                                  #####
##### Second check on xtb output file: string to check SCC convergence                        #####
convergence_string="convergence criteria satisfied"                                           #####
###################################################################################################

###################################################################################################
##### if file "energy.log" exists, delete it and reopen it!                                   #####
if os.path.exists("energy.log"):                                                              #####
    os.remove("energy.log")                                                                   #####
file_out = open("energy.log","a")                                                             #####
##### write header to this file                                                               #####
file_out.write('%15s\t\t%04s\t%04s\t%02s\t%05s\n' % ("energy","r2","r1","c","t"))             #####
###################################################################################################

###################################################################################################
#####         perform loops over all t, c, r1 and r2 moves according to THEMIS INPUT file     #####
###################################################################################################
##### i.   remember that python indexes starts from zero;                                     #####
##### ii.  xtb output files are numbered according to their position in THEMIS loops:         #####
#####      point_"translation"_"mol2conformation"_"rotation1"_"rotation2".log                 #####
##### iii. these numbers are written with fixed length and leading zeroes:                    #####
#####      translation      : 00001 to 99999                                                  #####
#####      mol2conformation :    01 to    99                                                  #####
#####      rotation1        :  0001 to  9999                                                  #####
#####      rotation2        :  0001 to  9999                                                  #####
##### iv.  if output file exists,                                                             #####
#####         search for both convergence and final energy strings;                           #####
#####         if both exist,                                                                  #####
#####            calculate interaction energy and write it in this loop position;             #####
#####         if strings do not exist (calculation failed/not converged),                     #####
#####            assign repulsive energy and write it in this loop position;                  #####
#####      if output file does not exist (THEMIS skipped it due to repulsive contact),        #####
#####         assign repulsive energy to configuration and write it in this loop position.    #####
##### v.   energy.log file MUST contain nt x nconf x nr1 x nr2 energy values, and the header: #####
#####      a total of (nt x nc x nr1 x nr2) + 1 lines.                                        #####
###################################################################################################

for t in range(1,nt+1):
    for c in range(1,nc+1):
        for r1 in range(1,nr1+1):
            for r2 in range(1,nr2+1):
                filename = 'point_%05d_%02d_%04d_%04d.log' % (t, c, r1, r2) 
                if os.path.exists(filename): 
                    #########################################
                    # if xtb output file exists, open it... #
                    #########################################
                    file_in = open(filename,"r")
                    found_energy = False 
                    found_convergence = False
                    for line in file_in:
                        if re.search(convergence_string, line):
                            #########################################
                            # if calculation converged, assign True #
                            #########################################
                            found_convergence = True
                        if re.search(energy_string, line):
                            ##########################################
                            # if final energy was found, assign True #
                            # and search get its value               #
                            ##########################################
                            found_energy = True
                            fields = line.strip().split()
                            energy = float(fields[3])*float(Eh2kj_mol) - Einf[c-1] 
                    if not found_energy:
                        #######################################
                        # if final energy was not found, then #
                        # assign a respulsive energy value    #
                        #######################################
                        energy = float(1000000) 
                    if not found_convergence:
                        ##########################################
                        # if calculations dod not converge, then #
                        # assign a respulsive energy value       #
                        ##########################################
                        energy = float(1000000) 
                    file_out.write('%15.6f\t\t%04d\t%04d\t%02d\t%05d\n' % (energy,r2,r1,c,t))
                else:
                    ##########################################
                    # if xtb output file does not exist,     #
                    # write repulsive energy to output file. #
                    ##########################################
                    energy = float(1000000) 
                    file_out.write('%15.6f\t\t%04d\t%04d\t%02d\t%05d\n' % (energy,r2,r1,c,t))
file_out.close()
