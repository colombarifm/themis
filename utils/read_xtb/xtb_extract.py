#####################################################################################
#####  This script searches for xtb output files from single-point calculations #####
##### performed on structures generated by THEMIS. It extracts final energies   #####
##### and compute interaction energies for all configurations. If the output is #####
##### not found or calculation did not converge, it assigns a repulsive energy  #####
##### for this configuration. Interaction energies are written on energy.log    #####
##### in an ordered way since THEMIS **MUST** read them in the same loop order  #####
##### in order to build the partition function and search for the most stable   #####
##### structures. PLEASE CHECK YOUR RESULTS CAREFULLY!!!!!                      #####
#####                                                                           #####
#####   Usage:                                                                  #####
#####   i) Copy this script to the folder containing all QM output files;       #####
#####   ii) Fill the following fields according to initial Themis setup:        #####
#####       nt=                                                                 #####
#####       nr1=                                                                #####
#####       nr2=                                                                #####
#####   iii) Fill the following field with the total energy of the dimer at     #####
#####        infinite intermolecular distance:                                  #####
#####        Einf_Eh=                                                           #####
#####   iv)  python3 xtb_extract.py                                             #####
#####                                                                           #####
#####################################################################################

import os  
import sys
import re

#####################################################################################
#####          INPUT DATA ACCORDING TO THE SYSTEM. CHECK CAREFULLY!!!!!         #####
#####################################################################################
# assign the correct number of moves according to THEMIS run.
# number of translations
nt=  

# number of rotations
nr1=

# number of precession
nr2=

# THEMIS used the interaction energy Eint = Edimer - Einf:

# Edimer will be read from each output file;
# Einf must be calculated separately;
Einf_Eh=

#####################################################################################

# string to be searched in QM output file
string="TOTAL ENERGY"   

# string to check SCC convergence in xTB
check="Self consistent charge iterator did not converge"

# conversion factor: hartree to kJ/mol
Eh2kj_mol=2625.5
Einf= float(Einf_Eh) * float(Eh2kj_mol)

#####################################################################################

# if file "energy.log" exists, delete it and reopen it!
if os.path.exists("energy.log"):

    os.remove("energy.log")

fout = open("energy.log","a")

# write header to file
fout.write('%15s\t\t%04s\t%04s\t%05s\n' % ("energy","r2","r1","t"))

#############################################################################################
#####       perform loops over all t, r1 and r2 moves according to THEMIS INPUT file    #####
#############################################################################################
# i.   remember that python indexes starts from zero;
# ii.  files are numbered according to their position in THEMIS loops:
#      point_"translation"_"rotation1"_"rotation2".log
# iii. these numbers have four digits: 0001, 0002, etc...
# iv.  if output file exists, 
#         search for the string;
#         if string exists, 
#            calculate interaction energy and write it in this loop position;
#         if string does not exist (calculation failed), 
#            assign repulsive energy and write it in this loop position;
#      if output file does not exist (THEMIS skipped it due to repulsive contact),
#         assign repulsive energy to configuration and write it in this loop position.
# v.   energy.log file MUST containt nt x nr1 x nr2 energy values, and the header: 
#      a total of (nt x nr1 x nr2) + 1 lines.
#############################################################################################

for t in range(1,nt+1):

    for r1 in range(1,nr1+1):

        for r2 in range(1,nr2+1):

            filename = 'point_%05d_%04d_%04d.log' % (t, r1, r2) 

            if os.path.exists(filename): 

                f = open(filename,"r")
           
                found = False        

                for line in f:

                    if re.search(string, line):

                        fields = line.strip().split()
 
                        energy = float(fields[3])*float(Eh2kj_mol) - float(Einf) 

                        found = True

                        if re.search(check, line):

                            energy = float(1000000) 

                        fout.write('%15.6f\t\t%04d\t%04d\t%05d\n' % (energy,r2,r1,t))
  
                if not found:

                    energy = float(1000000) 
                
                    fout.write('%15.6f\t\t%04d\t%04d\t%05d\n' % (energy,r2,r1,t))
  
                    f.close()

            else:

                energy = float(1000000) 

                fout.write('%15.6f\t\t%04d\t%04d\t%05d\n' % (energy,r2,r1,t))

fout.close()
